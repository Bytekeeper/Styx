package org.fttbot.import
import bwapi.*
class FTechType(val source : TechType, val name : String, val getRace : Race, val mineralPrice : Int, val energyCost : Int, private val l_whatResearches : Lazy<FUnitType>, private val l_getWeapon : Lazy<FWeaponType>, val researchTime : Int, val targetsPosition : Boolean, private val l_requiredUnit : Lazy<FUnitType>, val targetsUnit : Boolean, val gasPrice : Int, private val l_getOrder : Lazy<FOrder>) {
   init {
      FTechType.instances[source] = this
   }
   val whatResearches : FUnitType by l_whatResearches
   val getWeapon : FWeaponType by l_getWeapon
   val requiredUnit : FUnitType by l_requiredUnit
   val getOrder : FOrder by l_getOrder
   override fun toString() = name

   companion object {
      internal val instances = HashMap<TechType, FTechType>()
      fun of(src : TechType) : FTechType = instances[src]!!
      val Stim_Packs : FTechType = FTechType(source = TechType.Stim_Packs, name = "Stim_Packs", getRace = Race.Terran, mineralPrice = 100, energyCost = 0, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Academy}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.None}, researchTime = 1200, targetsPosition = false, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = false, gasPrice = 100, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.None})
      val Lockdown : FTechType = FTechType(source = TechType.Lockdown, name = "Lockdown", getRace = Race.Terran, mineralPrice = 200, energyCost = 100, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Covert_Ops}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.Lockdown}, researchTime = 1500, targetsPosition = false, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 200, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.CastLockdown})
      val EMP_Shockwave : FTechType = FTechType(source = TechType.EMP_Shockwave, name = "EMP_Shockwave", getRace = Race.Terran, mineralPrice = 200, energyCost = 100, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Science_Facility}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.EMP_Shockwave}, researchTime = 1800, targetsPosition = true, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 200, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.CastEMPShockwave})
      val Spider_Mines : FTechType = FTechType(source = TechType.Spider_Mines, name = "Spider_Mines", getRace = Race.Terran, mineralPrice = 100, energyCost = 0, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Machine_Shop}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.Spider_Mines}, researchTime = 1200, targetsPosition = true, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = false, gasPrice = 100, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.PlaceMine})
      val Scanner_Sweep : FTechType = FTechType(source = TechType.Scanner_Sweep, name = "Scanner_Sweep", getRace = Race.Terran, mineralPrice = 0, energyCost = 50, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.None}, researchTime = 0, targetsPosition = true, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 0, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.CastScannerSweep})
      val Tank_Siege_Mode : FTechType = FTechType(source = TechType.Tank_Siege_Mode, name = "Tank_Siege_Mode", getRace = Race.Terran, mineralPrice = 150, energyCost = 0, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Machine_Shop}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.None}, researchTime = 1200, targetsPosition = false, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = false, gasPrice = 150, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.None})
      val Defensive_Matrix : FTechType = FTechType(source = TechType.Defensive_Matrix, name = "Defensive_Matrix", getRace = Race.Terran, mineralPrice = 0, energyCost = 100, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.None}, researchTime = 0, targetsPosition = false, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 0, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.CastDefensiveMatrix})
      val Irradiate : FTechType = FTechType(source = TechType.Irradiate, name = "Irradiate", getRace = Race.Terran, mineralPrice = 200, energyCost = 75, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Science_Facility}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.Irradiate}, researchTime = 1200, targetsPosition = false, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 200, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.CastIrradiate})
      val Yamato_Gun : FTechType = FTechType(source = TechType.Yamato_Gun, name = "Yamato_Gun", getRace = Race.Terran, mineralPrice = 100, energyCost = 150, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Physics_Lab}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.Yamato_Gun}, researchTime = 1800, targetsPosition = false, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 100, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.FireYamatoGun})
      val Cloaking_Field : FTechType = FTechType(source = TechType.Cloaking_Field, name = "Cloaking_Field", getRace = Race.Terran, mineralPrice = 150, energyCost = 25, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Control_Tower}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.None}, researchTime = 1500, targetsPosition = false, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = false, gasPrice = 150, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.None})
      val Personnel_Cloaking : FTechType = FTechType(source = TechType.Personnel_Cloaking, name = "Personnel_Cloaking", getRace = Race.Terran, mineralPrice = 100, energyCost = 25, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Covert_Ops}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.None}, researchTime = 1200, targetsPosition = false, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = false, gasPrice = 100, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.None})
      val Restoration : FTechType = FTechType(source = TechType.Restoration, name = "Restoration", getRace = Race.Terran, mineralPrice = 100, energyCost = 50, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Academy}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.Restoration}, researchTime = 1200, targetsPosition = false, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 100, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.CastRestoration})
      val Optical_Flare : FTechType = FTechType(source = TechType.Optical_Flare, name = "Optical_Flare", getRace = Race.Terran, mineralPrice = 100, energyCost = 75, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Academy}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.Optical_Flare}, researchTime = 1800, targetsPosition = false, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 100, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.CastOpticalFlare})
      val Healing : FTechType = FTechType(source = TechType.Healing, name = "Healing", getRace = Race.Terran, mineralPrice = 0, energyCost = 1, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.None}, researchTime = 0, targetsPosition = true, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 0, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.MedicHeal})
      val Nuclear_Strike : FTechType = FTechType(source = TechType.Nuclear_Strike, name = "Nuclear_Strike", getRace = Race.Terran, mineralPrice = 0, energyCost = 0, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.Nuclear_Strike}, researchTime = 0, targetsPosition = true, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 0, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.NukePaint})
      val Burrowing : FTechType = FTechType(source = TechType.Burrowing, name = "Burrowing", getRace = Race.Zerg, mineralPrice = 100, energyCost = 0, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Zerg_Hatchery}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.None}, researchTime = 1200, targetsPosition = false, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = false, gasPrice = 100, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.None})
      val Infestation : FTechType = FTechType(source = TechType.Infestation, name = "Infestation", getRace = Race.Zerg, mineralPrice = 0, energyCost = 0, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.None}, researchTime = 0, targetsPosition = false, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 0, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.CastInfestation})
      val Spawn_Broodlings : FTechType = FTechType(source = TechType.Spawn_Broodlings, name = "Spawn_Broodlings", getRace = Race.Zerg, mineralPrice = 100, energyCost = 150, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Zerg_Queens_Nest}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.Spawn_Broodlings}, researchTime = 1200, targetsPosition = false, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 100, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.CastSpawnBroodlings})
      val Dark_Swarm : FTechType = FTechType(source = TechType.Dark_Swarm, name = "Dark_Swarm", getRace = Race.Zerg, mineralPrice = 0, energyCost = 100, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.Dark_Swarm}, researchTime = 0, targetsPosition = true, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 0, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.CastDarkSwarm})
      val Plague : FTechType = FTechType(source = TechType.Plague, name = "Plague", getRace = Race.Zerg, mineralPrice = 200, energyCost = 150, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Zerg_Defiler_Mound}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.Plague}, researchTime = 1500, targetsPosition = true, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 200, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.CastPlague})
      val Consume : FTechType = FTechType(source = TechType.Consume, name = "Consume", getRace = Race.Zerg, mineralPrice = 100, energyCost = 0, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Zerg_Defiler_Mound}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.Consume}, researchTime = 1500, targetsPosition = false, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 100, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.CastConsume})
      val Ensnare : FTechType = FTechType(source = TechType.Ensnare, name = "Ensnare", getRace = Race.Zerg, mineralPrice = 100, energyCost = 75, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Zerg_Queens_Nest}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.Ensnare}, researchTime = 1200, targetsPosition = true, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 100, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.CastEnsnare})
      val Parasite : FTechType = FTechType(source = TechType.Parasite, name = "Parasite", getRace = Race.Zerg, mineralPrice = 0, energyCost = 75, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.Parasite}, researchTime = 0, targetsPosition = false, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 0, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.CastParasite})
      val Lurker_Aspect : FTechType = FTechType(source = TechType.Lurker_Aspect, name = "Lurker_Aspect", getRace = Race.Zerg, mineralPrice = 200, energyCost = 0, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Zerg_Hydralisk_Den}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.None}, researchTime = 1800, targetsPosition = false, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Zerg_Lair}, targetsUnit = false, gasPrice = 200, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.None})
      val Psionic_Storm : FTechType = FTechType(source = TechType.Psionic_Storm, name = "Psionic_Storm", getRace = Race.Protoss, mineralPrice = 200, energyCost = 75, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Templar_Archives}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.Psionic_Storm}, researchTime = 1800, targetsPosition = true, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 200, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.CastPsionicStorm})
      val Hallucination : FTechType = FTechType(source = TechType.Hallucination, name = "Hallucination", getRace = Race.Protoss, mineralPrice = 150, energyCost = 100, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Templar_Archives}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.None}, researchTime = 1200, targetsPosition = false, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 150, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.CastHallucination})
      val Recall : FTechType = FTechType(source = TechType.Recall, name = "Recall", getRace = Race.Protoss, mineralPrice = 150, energyCost = 150, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Arbiter_Tribunal}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.None}, researchTime = 1800, targetsPosition = true, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 150, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.CastRecall})
      val Stasis_Field : FTechType = FTechType(source = TechType.Stasis_Field, name = "Stasis_Field", getRace = Race.Protoss, mineralPrice = 150, energyCost = 100, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Arbiter_Tribunal}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.Stasis_Field}, researchTime = 1500, targetsPosition = true, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 150, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.CastStasisField})
      val Archon_Warp : FTechType = FTechType(source = TechType.Archon_Warp, name = "Archon_Warp", getRace = Race.Protoss, mineralPrice = 0, energyCost = 0, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.None}, researchTime = 0, targetsPosition = false, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 0, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.None})
      val Disruption_Web : FTechType = FTechType(source = TechType.Disruption_Web, name = "Disruption_Web", getRace = Race.Protoss, mineralPrice = 200, energyCost = 125, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Fleet_Beacon}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.Disruption_Web}, researchTime = 1200, targetsPosition = true, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 200, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.CastDisruptionWeb})
      val Mind_Control : FTechType = FTechType(source = TechType.Mind_Control, name = "Mind_Control", getRace = Race.Protoss, mineralPrice = 200, energyCost = 150, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Templar_Archives}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.Mind_Control}, researchTime = 1800, targetsPosition = false, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 200, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.CastMindControl})
      val Dark_Archon_Meld : FTechType = FTechType(source = TechType.Dark_Archon_Meld, name = "Dark_Archon_Meld", getRace = Race.Protoss, mineralPrice = 0, energyCost = 0, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.None}, researchTime = 0, targetsPosition = false, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 0, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.None})
      val Feedback : FTechType = FTechType(source = TechType.Feedback, name = "Feedback", getRace = Race.Protoss, mineralPrice = 100, energyCost = 50, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.Feedback}, researchTime = 1800, targetsPosition = false, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 100, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.CastFeedback})
      val Maelstrom : FTechType = FTechType(source = TechType.Maelstrom, name = "Maelstrom", getRace = Race.Protoss, mineralPrice = 100, energyCost = 100, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Templar_Archives}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.Maelstrom}, researchTime = 1500, targetsPosition = true, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = true, gasPrice = 100, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.CastMaelstrom})
      val None : FTechType = FTechType(source = TechType.None, name = "None", getRace = Race.None, mineralPrice = 0, energyCost = 0, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.None}, researchTime = 0, targetsPosition = false, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = false, gasPrice = 0, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.None})
      val Unknown : FTechType = FTechType(source = TechType.Unknown, name = "Unknown", getRace = Race.Unknown, mineralPrice = 0, energyCost = 0, l_whatResearches = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Unknown}, l_getWeapon = lazy(LazyThreadSafetyMode.NONE) {FWeaponType.Unknown}, researchTime = 0, targetsPosition = false, l_requiredUnit = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, targetsUnit = false, gasPrice = 0, l_getOrder = lazy(LazyThreadSafetyMode.NONE) {FOrder.Unknown})
   }
}
