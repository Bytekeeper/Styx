package org.fttbot.import
import bwapi.*
class FUpgradeType(val source : UpgradeType, val name : String, val getRace : Race, val mineralPrice : Int, val gasPriceFactor : Int, private val l_whatsRequired : Lazy<FUnitType>, val maxRepeats : Int, val upgradeTime : Int, private val l_whatUpgrades : Lazy<FUnitType>, val gasPrice : Int, val mineralPriceFactor : Int, val upgradeTimeFactor : Int) {
   init {
      FUpgradeType.instances[source] = this
   }
   val whatsRequired : FUnitType by l_whatsRequired
   val whatUpgrades : FUnitType by l_whatUpgrades
   override fun toString() = name

   companion object {
      internal val instances = HashMap<UpgradeType, FUpgradeType>()
      fun of(src : UpgradeType) : FUpgradeType = instances[src]!!
      val Terran_Infantry_Armor : FUpgradeType = FUpgradeType(source = UpgradeType.Terran_Infantry_Armor, name = "Terran_Infantry_Armor", getRace = Race.Terran, mineralPrice = 100, gasPriceFactor = 75, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 3, upgradeTime = 4000, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Engineering_Bay}, gasPrice = 100, mineralPriceFactor = 75, upgradeTimeFactor = 480)
      val Terran_Vehicle_Plating : FUpgradeType = FUpgradeType(source = UpgradeType.Terran_Vehicle_Plating, name = "Terran_Vehicle_Plating", getRace = Race.Terran, mineralPrice = 100, gasPriceFactor = 75, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 3, upgradeTime = 4000, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Armory}, gasPrice = 100, mineralPriceFactor = 75, upgradeTimeFactor = 480)
      val Terran_Ship_Plating : FUpgradeType = FUpgradeType(source = UpgradeType.Terran_Ship_Plating, name = "Terran_Ship_Plating", getRace = Race.Terran, mineralPrice = 150, gasPriceFactor = 75, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 3, upgradeTime = 4000, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Armory}, gasPrice = 150, mineralPriceFactor = 75, upgradeTimeFactor = 480)
      val Terran_Infantry_Weapons : FUpgradeType = FUpgradeType(source = UpgradeType.Terran_Infantry_Weapons, name = "Terran_Infantry_Weapons", getRace = Race.Terran, mineralPrice = 100, gasPriceFactor = 75, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 3, upgradeTime = 4000, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Engineering_Bay}, gasPrice = 100, mineralPriceFactor = 75, upgradeTimeFactor = 480)
      val Terran_Vehicle_Weapons : FUpgradeType = FUpgradeType(source = UpgradeType.Terran_Vehicle_Weapons, name = "Terran_Vehicle_Weapons", getRace = Race.Terran, mineralPrice = 100, gasPriceFactor = 75, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 3, upgradeTime = 4000, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Armory}, gasPrice = 100, mineralPriceFactor = 75, upgradeTimeFactor = 480)
      val Terran_Ship_Weapons : FUpgradeType = FUpgradeType(source = UpgradeType.Terran_Ship_Weapons, name = "Terran_Ship_Weapons", getRace = Race.Terran, mineralPrice = 100, gasPriceFactor = 50, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 3, upgradeTime = 4000, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Armory}, gasPrice = 100, mineralPriceFactor = 50, upgradeTimeFactor = 480)
      val U_238_Shells : FUpgradeType = FUpgradeType(source = UpgradeType.U_238_Shells, name = "U_238_Shells", getRace = Race.Terran, mineralPrice = 150, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 1500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Academy}, gasPrice = 150, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Ion_Thrusters : FUpgradeType = FUpgradeType(source = UpgradeType.Ion_Thrusters, name = "Ion_Thrusters", getRace = Race.Terran, mineralPrice = 100, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 1500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Machine_Shop}, gasPrice = 100, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Titan_Reactor : FUpgradeType = FUpgradeType(source = UpgradeType.Titan_Reactor, name = "Titan_Reactor", getRace = Race.Terran, mineralPrice = 150, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Science_Facility}, gasPrice = 150, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Ocular_Implants : FUpgradeType = FUpgradeType(source = UpgradeType.Ocular_Implants, name = "Ocular_Implants", getRace = Race.Terran, mineralPrice = 100, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Covert_Ops}, gasPrice = 100, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Moebius_Reactor : FUpgradeType = FUpgradeType(source = UpgradeType.Moebius_Reactor, name = "Moebius_Reactor", getRace = Race.Terran, mineralPrice = 150, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Covert_Ops}, gasPrice = 150, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Apollo_Reactor : FUpgradeType = FUpgradeType(source = UpgradeType.Apollo_Reactor, name = "Apollo_Reactor", getRace = Race.Terran, mineralPrice = 200, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Control_Tower}, gasPrice = 200, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Colossus_Reactor : FUpgradeType = FUpgradeType(source = UpgradeType.Colossus_Reactor, name = "Colossus_Reactor", getRace = Race.Terran, mineralPrice = 150, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Physics_Lab}, gasPrice = 150, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Caduceus_Reactor : FUpgradeType = FUpgradeType(source = UpgradeType.Caduceus_Reactor, name = "Caduceus_Reactor", getRace = Race.Terran, mineralPrice = 150, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Academy}, gasPrice = 150, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Charon_Boosters : FUpgradeType = FUpgradeType(source = UpgradeType.Charon_Boosters, name = "Charon_Boosters", getRace = Race.Terran, mineralPrice = 100, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Armory}, maxRepeats = 1, upgradeTime = 2000, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Terran_Machine_Shop}, gasPrice = 100, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Zerg_Carapace : FUpgradeType = FUpgradeType(source = UpgradeType.Zerg_Carapace, name = "Zerg_Carapace", getRace = Race.Zerg, mineralPrice = 150, gasPriceFactor = 75, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 3, upgradeTime = 4000, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Zerg_Evolution_Chamber}, gasPrice = 150, mineralPriceFactor = 75, upgradeTimeFactor = 480)
      val Zerg_Flyer_Carapace : FUpgradeType = FUpgradeType(source = UpgradeType.Zerg_Flyer_Carapace, name = "Zerg_Flyer_Carapace", getRace = Race.Zerg, mineralPrice = 150, gasPriceFactor = 75, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 3, upgradeTime = 4000, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Zerg_Spire}, gasPrice = 150, mineralPriceFactor = 75, upgradeTimeFactor = 480)
      val Zerg_Melee_Attacks : FUpgradeType = FUpgradeType(source = UpgradeType.Zerg_Melee_Attacks, name = "Zerg_Melee_Attacks", getRace = Race.Zerg, mineralPrice = 100, gasPriceFactor = 50, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 3, upgradeTime = 4000, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Zerg_Evolution_Chamber}, gasPrice = 100, mineralPriceFactor = 50, upgradeTimeFactor = 480)
      val Zerg_Missile_Attacks : FUpgradeType = FUpgradeType(source = UpgradeType.Zerg_Missile_Attacks, name = "Zerg_Missile_Attacks", getRace = Race.Zerg, mineralPrice = 100, gasPriceFactor = 50, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 3, upgradeTime = 4000, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Zerg_Evolution_Chamber}, gasPrice = 100, mineralPriceFactor = 50, upgradeTimeFactor = 480)
      val Zerg_Flyer_Attacks : FUpgradeType = FUpgradeType(source = UpgradeType.Zerg_Flyer_Attacks, name = "Zerg_Flyer_Attacks", getRace = Race.Zerg, mineralPrice = 100, gasPriceFactor = 75, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 3, upgradeTime = 4000, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Zerg_Spire}, gasPrice = 100, mineralPriceFactor = 75, upgradeTimeFactor = 480)
      val Ventral_Sacs : FUpgradeType = FUpgradeType(source = UpgradeType.Ventral_Sacs, name = "Ventral_Sacs", getRace = Race.Zerg, mineralPrice = 200, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2400, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Zerg_Lair}, gasPrice = 200, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Antennae : FUpgradeType = FUpgradeType(source = UpgradeType.Antennae, name = "Antennae", getRace = Race.Zerg, mineralPrice = 150, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2000, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Zerg_Lair}, gasPrice = 150, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Pneumatized_Carapace : FUpgradeType = FUpgradeType(source = UpgradeType.Pneumatized_Carapace, name = "Pneumatized_Carapace", getRace = Race.Zerg, mineralPrice = 150, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2000, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Zerg_Lair}, gasPrice = 150, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Metabolic_Boost : FUpgradeType = FUpgradeType(source = UpgradeType.Metabolic_Boost, name = "Metabolic_Boost", getRace = Race.Zerg, mineralPrice = 100, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 1500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Zerg_Spawning_Pool}, gasPrice = 100, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Adrenal_Glands : FUpgradeType = FUpgradeType(source = UpgradeType.Adrenal_Glands, name = "Adrenal_Glands", getRace = Race.Zerg, mineralPrice = 200, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Zerg_Hive}, maxRepeats = 1, upgradeTime = 1500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Zerg_Spawning_Pool}, gasPrice = 200, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Muscular_Augments : FUpgradeType = FUpgradeType(source = UpgradeType.Muscular_Augments, name = "Muscular_Augments", getRace = Race.Zerg, mineralPrice = 150, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 1500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Zerg_Hydralisk_Den}, gasPrice = 150, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Grooved_Spines : FUpgradeType = FUpgradeType(source = UpgradeType.Grooved_Spines, name = "Grooved_Spines", getRace = Race.Zerg, mineralPrice = 150, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 1500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Zerg_Hydralisk_Den}, gasPrice = 150, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Gamete_Meiosis : FUpgradeType = FUpgradeType(source = UpgradeType.Gamete_Meiosis, name = "Gamete_Meiosis", getRace = Race.Zerg, mineralPrice = 150, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Zerg_Queens_Nest}, gasPrice = 150, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Metasynaptic_Node : FUpgradeType = FUpgradeType(source = UpgradeType.Metasynaptic_Node, name = "Metasynaptic_Node", getRace = Race.Zerg, mineralPrice = 150, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Zerg_Defiler_Mound}, gasPrice = 150, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Chitinous_Plating : FUpgradeType = FUpgradeType(source = UpgradeType.Chitinous_Plating, name = "Chitinous_Plating", getRace = Race.Zerg, mineralPrice = 150, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2000, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Zerg_Ultralisk_Cavern}, gasPrice = 150, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Anabolic_Synthesis : FUpgradeType = FUpgradeType(source = UpgradeType.Anabolic_Synthesis, name = "Anabolic_Synthesis", getRace = Race.Zerg, mineralPrice = 200, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2000, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Zerg_Ultralisk_Cavern}, gasPrice = 200, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Protoss_Ground_Armor : FUpgradeType = FUpgradeType(source = UpgradeType.Protoss_Ground_Armor, name = "Protoss_Ground_Armor", getRace = Race.Protoss, mineralPrice = 100, gasPriceFactor = 75, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 3, upgradeTime = 4000, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Forge}, gasPrice = 100, mineralPriceFactor = 75, upgradeTimeFactor = 480)
      val Protoss_Air_Armor : FUpgradeType = FUpgradeType(source = UpgradeType.Protoss_Air_Armor, name = "Protoss_Air_Armor", getRace = Race.Protoss, mineralPrice = 150, gasPriceFactor = 75, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 3, upgradeTime = 4000, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Cybernetics_Core}, gasPrice = 150, mineralPriceFactor = 75, upgradeTimeFactor = 480)
      val Protoss_Ground_Weapons : FUpgradeType = FUpgradeType(source = UpgradeType.Protoss_Ground_Weapons, name = "Protoss_Ground_Weapons", getRace = Race.Protoss, mineralPrice = 100, gasPriceFactor = 50, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 3, upgradeTime = 4000, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Forge}, gasPrice = 100, mineralPriceFactor = 50, upgradeTimeFactor = 480)
      val Protoss_Air_Weapons : FUpgradeType = FUpgradeType(source = UpgradeType.Protoss_Air_Weapons, name = "Protoss_Air_Weapons", getRace = Race.Protoss, mineralPrice = 100, gasPriceFactor = 75, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 3, upgradeTime = 4000, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Cybernetics_Core}, gasPrice = 100, mineralPriceFactor = 75, upgradeTimeFactor = 480)
      val Protoss_Plasma_Shields : FUpgradeType = FUpgradeType(source = UpgradeType.Protoss_Plasma_Shields, name = "Protoss_Plasma_Shields", getRace = Race.Protoss, mineralPrice = 200, gasPriceFactor = 100, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 3, upgradeTime = 4000, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Forge}, gasPrice = 200, mineralPriceFactor = 100, upgradeTimeFactor = 480)
      val Singularity_Charge : FUpgradeType = FUpgradeType(source = UpgradeType.Singularity_Charge, name = "Singularity_Charge", getRace = Race.Protoss, mineralPrice = 150, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Cybernetics_Core}, gasPrice = 150, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Leg_Enhancements : FUpgradeType = FUpgradeType(source = UpgradeType.Leg_Enhancements, name = "Leg_Enhancements", getRace = Race.Protoss, mineralPrice = 150, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2000, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Citadel_of_Adun}, gasPrice = 150, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Scarab_Damage : FUpgradeType = FUpgradeType(source = UpgradeType.Scarab_Damage, name = "Scarab_Damage", getRace = Race.Protoss, mineralPrice = 200, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Robotics_Support_Bay}, gasPrice = 200, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Reaver_Capacity : FUpgradeType = FUpgradeType(source = UpgradeType.Reaver_Capacity, name = "Reaver_Capacity", getRace = Race.Protoss, mineralPrice = 200, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Robotics_Support_Bay}, gasPrice = 200, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Gravitic_Drive : FUpgradeType = FUpgradeType(source = UpgradeType.Gravitic_Drive, name = "Gravitic_Drive", getRace = Race.Protoss, mineralPrice = 200, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Robotics_Support_Bay}, gasPrice = 200, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Sensor_Array : FUpgradeType = FUpgradeType(source = UpgradeType.Sensor_Array, name = "Sensor_Array", getRace = Race.Protoss, mineralPrice = 150, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2000, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Observatory}, gasPrice = 150, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Gravitic_Boosters : FUpgradeType = FUpgradeType(source = UpgradeType.Gravitic_Boosters, name = "Gravitic_Boosters", getRace = Race.Protoss, mineralPrice = 150, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2000, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Observatory}, gasPrice = 150, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Khaydarin_Amulet : FUpgradeType = FUpgradeType(source = UpgradeType.Khaydarin_Amulet, name = "Khaydarin_Amulet", getRace = Race.Protoss, mineralPrice = 150, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Templar_Archives}, gasPrice = 150, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Apial_Sensors : FUpgradeType = FUpgradeType(source = UpgradeType.Apial_Sensors, name = "Apial_Sensors", getRace = Race.Protoss, mineralPrice = 100, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Fleet_Beacon}, gasPrice = 100, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Gravitic_Thrusters : FUpgradeType = FUpgradeType(source = UpgradeType.Gravitic_Thrusters, name = "Gravitic_Thrusters", getRace = Race.Protoss, mineralPrice = 200, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Fleet_Beacon}, gasPrice = 200, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Carrier_Capacity : FUpgradeType = FUpgradeType(source = UpgradeType.Carrier_Capacity, name = "Carrier_Capacity", getRace = Race.Protoss, mineralPrice = 100, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 1500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Fleet_Beacon}, gasPrice = 100, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Khaydarin_Core : FUpgradeType = FUpgradeType(source = UpgradeType.Khaydarin_Core, name = "Khaydarin_Core", getRace = Race.Protoss, mineralPrice = 150, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Arbiter_Tribunal}, gasPrice = 150, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Argus_Jewel : FUpgradeType = FUpgradeType(source = UpgradeType.Argus_Jewel, name = "Argus_Jewel", getRace = Race.Protoss, mineralPrice = 100, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Fleet_Beacon}, gasPrice = 100, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Argus_Talisman : FUpgradeType = FUpgradeType(source = UpgradeType.Argus_Talisman, name = "Argus_Talisman", getRace = Race.Protoss, mineralPrice = 150, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 1, upgradeTime = 2500, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.Protoss_Templar_Archives}, gasPrice = 150, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Upgrade_60 : FUpgradeType = FUpgradeType(source = UpgradeType.Upgrade_60, name = "Upgrade_60", getRace = Race.None, mineralPrice = 0, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 0, upgradeTime = 0, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, gasPrice = 0, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val None : FUpgradeType = FUpgradeType(source = UpgradeType.None, name = "None", getRace = Race.None, mineralPrice = 0, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 0, upgradeTime = 0, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, gasPrice = 0, mineralPriceFactor = 0, upgradeTimeFactor = 0)
      val Unknown : FUpgradeType = FUpgradeType(source = UpgradeType.Unknown, name = "Unknown", getRace = Race.Unknown, mineralPrice = 0, gasPriceFactor = 0, l_whatsRequired = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, maxRepeats = 0, upgradeTime = 0, l_whatUpgrades = lazy(LazyThreadSafetyMode.NONE) {FUnitType.None}, gasPrice = 0, mineralPriceFactor = 0, upgradeTimeFactor = 0)
   }
}
