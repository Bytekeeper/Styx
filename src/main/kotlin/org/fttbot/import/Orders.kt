package org.fttbot.import
import bwapi.*
class FOrder(val source : Order, val name : String) {
   init {
      FOrder.instances[source] = this
   }
   override fun toString() = name

   companion object {
      internal val instances = HashMap<Order, FOrder>()
      fun of(src : Order) : FOrder = instances[src]!!
      val Die : FOrder = FOrder(source = Order.Die, name = "Die")
      val Stop : FOrder = FOrder(source = Order.Stop, name = "Stop")
      val Guard : FOrder = FOrder(source = Order.Guard, name = "Guard")
      val PlayerGuard : FOrder = FOrder(source = Order.PlayerGuard, name = "PlayerGuard")
      val TurretGuard : FOrder = FOrder(source = Order.TurretGuard, name = "TurretGuard")
      val BunkerGuard : FOrder = FOrder(source = Order.BunkerGuard, name = "BunkerGuard")
      val Move : FOrder = FOrder(source = Order.Move, name = "Move")
      val AttackUnit : FOrder = FOrder(source = Order.AttackUnit, name = "AttackUnit")
      val AttackTile : FOrder = FOrder(source = Order.AttackTile, name = "AttackTile")
      val Hover : FOrder = FOrder(source = Order.Hover, name = "Hover")
      val AttackMove : FOrder = FOrder(source = Order.AttackMove, name = "AttackMove")
      val InfestedCommandCenter : FOrder = FOrder(source = Order.InfestedCommandCenter, name = "InfestedCommandCenter")
      val UnusedNothing : FOrder = FOrder(source = Order.UnusedNothing, name = "UnusedNothing")
      val UnusedPowerup : FOrder = FOrder(source = Order.UnusedPowerup, name = "UnusedPowerup")
      val TowerGuard : FOrder = FOrder(source = Order.TowerGuard, name = "TowerGuard")
      val VultureMine : FOrder = FOrder(source = Order.VultureMine, name = "VultureMine")
      val Nothing : FOrder = FOrder(source = Order.Nothing, name = "Nothing")
      val CastInfestation : FOrder = FOrder(source = Order.CastInfestation, name = "CastInfestation")
      val InfestingCommandCenter : FOrder = FOrder(source = Order.InfestingCommandCenter, name = "InfestingCommandCenter")
      val PlaceBuilding : FOrder = FOrder(source = Order.PlaceBuilding, name = "PlaceBuilding")
      val CreateProtossBuilding : FOrder = FOrder(source = Order.CreateProtossBuilding, name = "CreateProtossBuilding")
      val ConstructingBuilding : FOrder = FOrder(source = Order.ConstructingBuilding, name = "ConstructingBuilding")
      val Repair : FOrder = FOrder(source = Order.Repair, name = "Repair")
      val PlaceAddon : FOrder = FOrder(source = Order.PlaceAddon, name = "PlaceAddon")
      val BuildAddon : FOrder = FOrder(source = Order.BuildAddon, name = "BuildAddon")
      val Train : FOrder = FOrder(source = Order.Train, name = "TrainOrAddon")
      val RallyPointUnit : FOrder = FOrder(source = Order.RallyPointUnit, name = "RallyPointUnit")
      val RallyPointTile : FOrder = FOrder(source = Order.RallyPointTile, name = "RallyPointTile")
      val ZergBirth : FOrder = FOrder(source = Order.ZergBirth, name = "ZergBirth")
      val ZergUnitMorph : FOrder = FOrder(source = Order.ZergUnitMorph, name = "ZergUnitMorph")
      val ZergBuildingMorph : FOrder = FOrder(source = Order.ZergBuildingMorph, name = "ZergBuildingMorph")
      val IncompleteBuilding : FOrder = FOrder(source = Order.IncompleteBuilding, name = "IncompleteBuilding")
      val BuildNydusExit : FOrder = FOrder(source = Order.BuildNydusExit, name = "BuildNydusExit")
      val EnterNydusCanal : FOrder = FOrder(source = Order.EnterNydusCanal, name = "EnterNydusCanal")
      val Follow : FOrder = FOrder(source = Order.Follow, name = "Follow")
      val Carrier : FOrder = FOrder(source = Order.Carrier, name = "Carrier")
      val ReaverCarrierMove : FOrder = FOrder(source = Order.ReaverCarrierMove, name = "ReaverCarrierMove")
      val CarrierIgnore2 : FOrder = FOrder(source = Order.CarrierIgnore2, name = "CarrierIgnore2")
      val Reaver : FOrder = FOrder(source = Order.Reaver, name = "Reaver")
      val TrainFighter : FOrder = FOrder(source = Order.TrainFighter, name = "TrainFighter")
      val InterceptorAttack : FOrder = FOrder(source = Order.InterceptorAttack, name = "InterceptorAttack")
      val ScarabAttack : FOrder = FOrder(source = Order.ScarabAttack, name = "ScarabAttack")
      val RechargeShieldsUnit : FOrder = FOrder(source = Order.RechargeShieldsUnit, name = "RechargeShieldsUnit")
      val RechargeShieldsBattery : FOrder = FOrder(source = Order.RechargeShieldsBattery, name = "RechargeShieldsBattery")
      val ShieldBattery : FOrder = FOrder(source = Order.ShieldBattery, name = "ShieldBattery")
      val InterceptorReturn : FOrder = FOrder(source = Order.InterceptorReturn, name = "InterceptorReturn")
      val BuildingLand : FOrder = FOrder(source = Order.BuildingLand, name = "BuildingLand")
      val BuildingLiftOff : FOrder = FOrder(source = Order.BuildingLiftOff, name = "BuildingLiftOff")
      val DroneLiftOff : FOrder = FOrder(source = Order.DroneLiftOff, name = "DroneLiftOff")
      val LiftingOff : FOrder = FOrder(source = Order.LiftingOff, name = "LiftingOff")
      val ResearchTech : FOrder = FOrder(source = Order.ResearchTech, name = "ResearchTech")
      val Upgrade : FOrder = FOrder(source = Order.Upgrade, name = "Upgrade")
      val Larva : FOrder = FOrder(source = Order.Larva, name = "Larva")
      val SpawningLarva : FOrder = FOrder(source = Order.SpawningLarva, name = "SpawningLarva")
      val Harvest1 : FOrder = FOrder(source = Order.Harvest1, name = "Harvest1")
      val Harvest2 : FOrder = FOrder(source = Order.Harvest2, name = "Harvest2")
      val MoveToGas : FOrder = FOrder(source = Order.MoveToGas, name = "MoveToGas")
      val WaitForGas : FOrder = FOrder(source = Order.WaitForGas, name = "WaitForGas")
      val HarvestGas : FOrder = FOrder(source = Order.HarvestGas, name = "HarvestGas")
      val ReturnGas : FOrder = FOrder(source = Order.ReturnGas, name = "ReturnGas")
      val MoveToMinerals : FOrder = FOrder(source = Order.MoveToMinerals, name = "MoveToMinerals")
      val WaitForMinerals : FOrder = FOrder(source = Order.WaitForMinerals, name = "WaitForMinerals")
      val MiningMinerals : FOrder = FOrder(source = Order.MiningMinerals, name = "MiningMinerals")
      val Harvest3 : FOrder = FOrder(source = Order.Harvest3, name = "Harvest3")
      val Harvest4 : FOrder = FOrder(source = Order.Harvest4, name = "Harvest4")
      val ReturnMinerals : FOrder = FOrder(source = Order.ReturnMinerals, name = "ReturnMinerals")
      val Interrupted : FOrder = FOrder(source = Order.Interrupted, name = "Interrupted")
      val EnterTransport : FOrder = FOrder(source = Order.EnterTransport, name = "EnterTransport")
      val PickupIdle : FOrder = FOrder(source = Order.PickupIdle, name = "PickupIdle")
      val PickupTransport : FOrder = FOrder(source = Order.PickupTransport, name = "PickupTransport")
      val PickupBunker : FOrder = FOrder(source = Order.PickupBunker, name = "PickupBunker")
      val Pickup4 : FOrder = FOrder(source = Order.Pickup4, name = "Pickup4")
      val PowerupIdle : FOrder = FOrder(source = Order.PowerupIdle, name = "PowerupIdle")
      val Sieging : FOrder = FOrder(source = Order.Sieging, name = "Sieging")
      val Unsieging : FOrder = FOrder(source = Order.Unsieging, name = "Unsieging")
      val InitCreepGrowth : FOrder = FOrder(source = Order.InitCreepGrowth, name = "InitCreepGrowth")
      val SpreadCreep : FOrder = FOrder(source = Order.SpreadCreep, name = "SpreadCreep")
      val StoppingCreepGrowth : FOrder = FOrder(source = Order.StoppingCreepGrowth, name = "StoppingCreepGrowth")
      val GuardianAspect : FOrder = FOrder(source = Order.GuardianAspect, name = "GuardianAspect")
      val ArchonWarp : FOrder = FOrder(source = Order.ArchonWarp, name = "ArchonWarp")
      val CompletingArchonSummon : FOrder = FOrder(source = Order.CompletingArchonSummon, name = "CompletingArchonSummon")
      val HoldPosition : FOrder = FOrder(source = Order.HoldPosition, name = "HoldPosition")
      val Cloak : FOrder = FOrder(source = Order.Cloak, name = "Cloak")
      val Decloak : FOrder = FOrder(source = Order.Decloak, name = "Decloak")
      val Unload : FOrder = FOrder(source = Order.Unload, name = "Unload")
      val MoveUnload : FOrder = FOrder(source = Order.MoveUnload, name = "MoveUnload")
      val FireYamatoGun : FOrder = FOrder(source = Order.FireYamatoGun, name = "FireYamatoGun")
      val CastLockdown : FOrder = FOrder(source = Order.CastLockdown, name = "CastLockdown")
      val Burrowing : FOrder = FOrder(source = Order.Burrowing, name = "Burrowing")
      val Burrowed : FOrder = FOrder(source = Order.Burrowed, name = "Burrowed")
      val Unburrowing : FOrder = FOrder(source = Order.Unburrowing, name = "Unburrowing")
      val CastDarkSwarm : FOrder = FOrder(source = Order.CastDarkSwarm, name = "CastDarkSwarm")
      val CastParasite : FOrder = FOrder(source = Order.CastParasite, name = "CastParasite")
      val CastSpawnBroodlings : FOrder = FOrder(source = Order.CastSpawnBroodlings, name = "CastSpawnBroodlings")
      val CastEMPShockwave : FOrder = FOrder(source = Order.CastEMPShockwave, name = "CastEMPShockwave")
      val NukeWait : FOrder = FOrder(source = Order.NukeWait, name = "NukeWait")
      val NukeTrain : FOrder = FOrder(source = Order.NukeTrain, name = "NukeTrain")
      val NukeLaunch : FOrder = FOrder(source = Order.NukeLaunch, name = "NukeLaunch")
      val NukePaint : FOrder = FOrder(source = Order.NukePaint, name = "NukePaint")
      val NukeUnit : FOrder = FOrder(source = Order.NukeUnit, name = "NukeUnit")
      val CastNuclearStrike : FOrder = FOrder(source = Order.CastNuclearStrike, name = "CastNuclearStrike")
      val NukeTrack : FOrder = FOrder(source = Order.NukeTrack, name = "NukeTrack")
      val CloakNearbyUnits : FOrder = FOrder(source = Order.CloakNearbyUnits, name = "CloakNearbyUnits")
      val PlaceMine : FOrder = FOrder(source = Order.PlaceMine, name = "PlaceMine")
      val RightClickAction : FOrder = FOrder(source = Order.RightClickAction, name = "RightClickAction")
      val CastRecall : FOrder = FOrder(source = Order.CastRecall, name = "CastRecall")
      val Teleport : FOrder = FOrder(source = Order.Teleport, name = "Teleport")
      val CastScannerSweep : FOrder = FOrder(source = Order.CastScannerSweep, name = "CastScannerSweep")
      val Scanner : FOrder = FOrder(source = Order.Scanner, name = "Scanner")
      val CastDefensiveMatrix : FOrder = FOrder(source = Order.CastDefensiveMatrix, name = "CastDefensiveMatrix")
      val CastPsionicStorm : FOrder = FOrder(source = Order.CastPsionicStorm, name = "CastPsionicStorm")
      val CastIrradiate : FOrder = FOrder(source = Order.CastIrradiate, name = "CastIrradiate")
      val CastPlague : FOrder = FOrder(source = Order.CastPlague, name = "CastPlague")
      val CastConsume : FOrder = FOrder(source = Order.CastConsume, name = "CastConsume")
      val CastEnsnare : FOrder = FOrder(source = Order.CastEnsnare, name = "CastEnsnare")
      val CastStasisField : FOrder = FOrder(source = Order.CastStasisField, name = "CastStasisField")
      val CastHallucination : FOrder = FOrder(source = Order.CastHallucination, name = "CastHallucination")
      val Hallucination2 : FOrder = FOrder(source = Order.Hallucination2, name = "Hallucination2")
      val ResetCollision : FOrder = FOrder(source = Order.ResetCollision, name = "ResetCollision")
      val Patrol : FOrder = FOrder(source = Order.Patrol, name = "Patrol")
      val CTFCOPInit : FOrder = FOrder(source = Order.CTFCOPInit, name = "CTFCOPInit")
      val CTFCOPStarted : FOrder = FOrder(source = Order.CTFCOPStarted, name = "CTFCOPStarted")
      val CTFCOP2 : FOrder = FOrder(source = Order.CTFCOP2, name = "CTFCOP2")
      val ComputerAI : FOrder = FOrder(source = Order.ComputerAI, name = "ComputerAI")
      val AtkMoveEP : FOrder = FOrder(source = Order.AtkMoveEP, name = "AtkMoveEP")
      val HarassMove : FOrder = FOrder(source = Order.HarassMove, name = "HarassMove")
      val AIPatrol : FOrder = FOrder(source = Order.AIPatrol, name = "AIPatrol")
      val GuardPost : FOrder = FOrder(source = Order.GuardPost, name = "GuardPost")
      val RescuePassive : FOrder = FOrder(source = Order.RescuePassive, name = "RescuePassive")
      val Neutral : FOrder = FOrder(source = Order.Neutral, name = "Neutral")
      val ComputerReturn : FOrder = FOrder(source = Order.ComputerReturn, name = "ComputerReturn")
      val SelfDestructing : FOrder = FOrder(source = Order.SelfDestructing, name = "SelfDestructing")
      val Critter : FOrder = FOrder(source = Order.Critter, name = "Critter")
      val HiddenGun : FOrder = FOrder(source = Order.HiddenGun, name = "HiddenGun")
      val OpenDoor : FOrder = FOrder(source = Order.OpenDoor, name = "OpenDoor")
      val CloseDoor : FOrder = FOrder(source = Order.CloseDoor, name = "CloseDoor")
      val HideTrap : FOrder = FOrder(source = Order.HideTrap, name = "HideTrap")
      val RevealTrap : FOrder = FOrder(source = Order.RevealTrap, name = "RevealTrap")
      val EnableDoodad : FOrder = FOrder(source = Order.EnableDoodad, name = "EnableDoodad")
      val DisableDoodad : FOrder = FOrder(source = Order.DisableDoodad, name = "DisableDoodad")
      val WarpIn : FOrder = FOrder(source = Order.WarpIn, name = "WarpIn")
      val Medic : FOrder = FOrder(source = Order.Medic, name = "Medic")
      val MedicHeal : FOrder = FOrder(source = Order.MedicHeal, name = "MedicHeal")
      val HealMove : FOrder = FOrder(source = Order.HealMove, name = "HealMove")
      val MedicHealToIdle : FOrder = FOrder(source = Order.MedicHealToIdle, name = "MedicHealToIdle")
      val CastRestoration : FOrder = FOrder(source = Order.CastRestoration, name = "CastRestoration")
      val CastDisruptionWeb : FOrder = FOrder(source = Order.CastDisruptionWeb, name = "CastDisruptionWeb")
      val CastMindControl : FOrder = FOrder(source = Order.CastMindControl, name = "CastMindControl")
      val DarkArchonMeld : FOrder = FOrder(source = Order.DarkArchonMeld, name = "DarkArchonMeld")
      val CastFeedback : FOrder = FOrder(source = Order.CastFeedback, name = "CastFeedback")
      val CastOpticalFlare : FOrder = FOrder(source = Order.CastOpticalFlare, name = "CastOpticalFlare")
      val CastMaelstrom : FOrder = FOrder(source = Order.CastMaelstrom, name = "CastMaelstrom")
      val JunkYardDog : FOrder = FOrder(source = Order.JunkYardDog, name = "JunkYardDog")
      val Fatal : FOrder = FOrder(source = Order.Fatal, name = "Fatal")
      val None : FOrder = FOrder(source = Order.None, name = "None")
      val Unknown : FOrder = FOrder(source = Order.Unknown, name = "Unknown")
   }
}
